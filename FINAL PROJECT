import turtle
import time


try:
    main()
except:
    print("An exception occurred")
finally:
    print("Begin Final Project")

# create a screen
screen = turtle.getscreen()

# a function to draw a rectangle and fill it with white background
screen.bgcolor("white")

# set title of screen
screen.title("Final Project: American Flag")

#Sets a class "MyTurtle" to create the parameters for starting the project
# Turtle is a class of its own, so we can inherit some of the parameters
class MyTurtle(turtle.Turtle):
    def __init__(self, pensize, speed, shape):
        super().__init__(shape)
        self.pensize(pensize)
        self.speed(speed)
t = MyTurtle(1, 100, "turtle")

# Draws a rectangle given the length, height, and color
def draw_rectangle(length, height, color):
    t.pendown()
    t.color(color)
    t.begin_fill()
    t.forward(length)
    t.right(90)
    t.forward(height)
    t.right(90)
    t.forward(length)
    t.right(90)
    t.forward(height)
    t.right(90)
    t.end_fill()
    t.penup()

# Draws a star given its size and color
def draw_star(size,color) :
    t.setheading(0)
    t.pendown()
    t.begin_fill()
    t.color(color)
    for turn in range(0,5) :
        t.forward(size)
        t.right(144)
        t.forward(size)
        t.right(144)
    t.end_fill()
    t.penup()
    
# this function is used to create 13 red and white stripes of flag
def draw_stripes():
    x = -168
    y = 320
    flag_height = 337
    flag_length = flag_height*1.9
    stripe_height = flag_height/13
    stripe_length = flag_length
    # we need to draw total 13 stripes, 7 red and 6 white
    # so we first create, 6 red and 6 white stripes alternatively
    for stripe in range(0,6):
        for color in ["#B31942", "#FFFFFF"]:
            t.goto(x,y)
            draw_rectangle(stripe_length, stripe_height, color)
            # decrease value of y by stripe_height
            y = y - stripe_height

    # create last red stripe
    t.goto(x,y)
    draw_rectangle(stripe_length, stripe_height, '#B31942')
    y = y - stripe_height


# this function create navy color square
# height = 7/13 of flag_height
# width = 0.76 * flag_height
# check references section for these values
def draw_square():
    flag_height = 337
    flag_length = flag_height*1.9
    square_height = (7/13) * flag_height
    square_length = (0.76) * flag_height
    stripe_height = flag_height/13
    stripe_length = flag_length
    t.goto(-168, 320) 
    draw_rectangle(square_length, square_height, '#0A3161')


def draw_six_stars():
    flag_height = 337
    stripe_height = flag_height/13
    star_space = 40
    line_space = stripe_height + 10
    star_size = 10
    y = 303
    # create 5 rows of stars
    for row in range(0,5) :
        x = -145
        # create 6 stars in each row
        for star in range (0,6) :
            t.goto(x,y)
            draw_star(star_size, '#FFFFFF')
            x = x + star_space
        y = y - line_space


def draw_five_stars():
    flag_height = 337
    stripe_height = flag_height/13
    star_space = 40
    line_space = stripe_height + 10
    star_size = 10
    y = 288
    # create 4 rows of stars
    for row in range(0,4) :
        x = -126
        # create 5 stars in each row
        for star in range (0,5) :
            t.goto(x,y)
            draw_star(star_size, "#FFFFFF")
            x = x + star_space
        y = y - line_space
        
# Draws the flag with an outline of the stars and stripes inside
def draw_flag(height):
    start_x = -168
    start_y = 320
    flag_height = 337
    flag_length = flag_height*1.9
    draw_stripes()
    draw_square()
    draw_six_stars()
    draw_five_stars()
    t.goto(start_x, start_y)
    t.pencolor("black")
    t.pendown()
    for i in range(2):
        t.forward(flag_length)
        t.right(90)
        t.forward(height)
        t.right(90)
    t.penup()
   
# Calls the American Flag function and starts after 5 seconds.
def main():
    time.sleep(5)
    draw_flag(337)
    t.hideturtle()
    # keep holding the screen until closed manually
    screen.mainloop()
    
if __name__ == "__main__":
    main()

# Returns the color in the form of an r, g, b, tuple
def get_color(color):
    rgb = []
    if not type(color) is str:
        raise Exception("Argument must be a string")
    for i in (0, 2, 4):
        rgb_value = int(color[i:i+2], 16)
        rgb.append(rgb_value)
    return tuple(rgb)
get_color("FFFFFF")
get_color("B22234")
get_color("3C3B6E")
get_color(4)
